only forward IP packets

lets say we get a packet in r1, and its destination is 10.1.0.16
compare the destination address in the packet, against the prefixes in the first column of the file
	- we're looking for a prefix match, bits of address matching bits of prefix, for the number of bits (/16 or /24) specified

once we find a match:
	the third column is the port you want to forward the packet out of
		(is an interface just a port?)

	when it has a middle column:
		its not directly connected, must use an intermediate node to get to it
		link layer destination must be the IP address of the intermediate node (given in the middle column)

		arp the interface (third column) with ip (second column), get mac address from intermediate
		forward data packet to intermediate

	intermediate receives data packet, which contains the final destination in the IP header

	(only change mac addresses in link layer when forwarding, dont change ip header addresses)

	in ip header, change time to live. timeToLive -= 1 every time you go through a router

	ipheader also has checksum, which must be recalculated every hop

	forwarding tells us what networks are out there and how to get to them
	arp tell us mac address of an ip address


- When you connect via the lookup table if there is not a corresponding address, you can just find the requesting data from the packet and forward to there.
- Never change IP address in IP hader when forwarding, but you do change the MAC, you can use the ip heder to match things in the table
- Two things you change in IP header: time to live (subtract 1 each hop), checksum (remake and re add)

- With router 1 you must mastch with destination address only, the table gives the appropritate interface etc. r1 ALWAYS knows prefixes, just not specific hosts
- r1 knows the direction based on prefix, it will arp all of the hosts and if it gets an answer then sends to the right spot based on destination mac

General:
Get packet, see if IP packet, if not IP don't forward it

Need to send an arp request to the router of choice
MAKE A MAP of strings and vectors of all the stuff waiting on a MAC for a particular IP
You can just continue as you need to on the router, so it might look to the affect of:

if (needs an arp) {
  add to queue map of other stuff waiting for an arp for a particular ip
  continue
} else {
  build the headers and stuff as you were before since we have a mac address
}

Then when you get the Mac you can just fire all of the waiting packets off

Basically the code needs to work as follows:
Receive IP packet
check if table has it
if not, forrward it after ARP-ing for the MAC of the next hop
then send it
Once it gets to the new router it must ARP again to get the mac of
the host to then complete the forward operation
then it's done

if it is in the prefix table then it's buisness as usual
just send to the proper host after ARP-ing for the MAC

Changing TTL in IPHeader:
Subtract 1 from TTL, put new value in and change the checksum in the header to match.

IP Header checksum calculated with IP header as its input
ICMP Header checksum calculated with ICMP header and ICMP data as its input

Needs to handle 3 error conditions -- Must always be sent to the packet sender
All errors will need to be the same format etc except for the type and code values.
1. TTL, type 11, code 0 -- If router ever gets a packet where TTL is 1 or less, do not forward the packet. Also report that as an error and send it back. Take the packet that caused the error to happen, copy ip header + next 8 bytes. So you're left with eth, ip, icmp header plus the old ip header and another 8 bytes. Basically find the ip header of the packet and copy 28 bytes from it. When the error is sent back to the sender, it will let it know which one caused the problem. The 28 bytes are our ICMP data and must be used to calculate the checksum for ICMP.
2. Destination Unreachable. Type 3, code 0 -- Address in packet doesn't match the one in our routing table, therefore we have no way to reach it  
3. Destination Unreachable. Type 3, code 1 -- Knew how to get to the network, but we can't get to the host. Have an entry on our table, but we can't arp for the MAC address, so if we don't get an arp response, we have no way of getting to this host. (Can use a timeout for this, anything longer than like 2 seconds will count as invalid and we can drop and send the error over).

How to test this:
All of these can be tested with ping. Ping will print all of the errors to the console.
